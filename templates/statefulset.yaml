apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app: {{ include "apache-nifi.name" . | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  serviceName: {{ template "apache-nifi.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "apache-nifi.name" . | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
    spec:
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
        fsGroup: 2000
      containers:
      - name: {{ template "apache-nifi.name" . }}-server
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command:
        - bash
        - -ce
        - |
          #!/bin/sh
          set -e

          create_keystore() {
              echo ${HOST}
              ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh standalone -n "${HOST}" -S "${KEYSTORE_PASS}" -C "CN=${HOST}, OU=NIFI" -P "${TRUSTSTORE_PASS}" -o "${NIFI_TOOLKIT_HOME}"
              mv ${NIFI_TOOLKIT_HOME}/${HOST}/keystore.jks ${NIFI_HOME}/conf/keystore.jks
              chown nifi:nifi ${NIFI_HOME}/conf/keystore.jks
              mv ${NIFI_TOOLKIT_HOME}/${HOST}/truststore.jks  ${NIFI_HOME}/conf/truststore.jks
              chown nifi:nifi ${NIFI_HOME}/conf/truststore.jks
          }

          patch_nifi_properties()  {
              cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"
              echo "nifi.web.http.host=${HOST}.${HEADLESS}" >> "${NIFI_HOME}/conf/nifi.properties"
              echo "nifi.web.https.host=${HOST}.${HEADLESS}" >> "${NIFI_HOME}/conf/nifi.properties"
              echo "nifi.remote.input.host=${HOST}.${HEADLESS}" >> "${NIFI_HOME}/conf/nifi.properties"
              echo "nifi.cluster.node.address=${HOST}.${HEADLESS}" >> "${NIFI_HOME}/conf/nifi.properties"
              echo "nifi.zookeeper.connect.string=${NIFI_ZOOKEEPER_CONNECT_STRING}" >> "${NIFI_HOME}/conf/nifi.properties"
          }

          create_keystore
          patch_nifi_properties
          #chown nifi:nifi /opt/nifi/data
          #chown nifi:nifi /opt/nifi/flowfile_repository
          #chown nifi:nifi /opt/nifi/content_repository
          #chown nifi:nifi /opt/nifi/logs

          sh "$@"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: {{ .Values.properties.httpPort }}
          name: http
          protocol: TCP
        - containerPort: {{ .Values.properties.httpsPort }}
          name: https
          protocol: TCP
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
        env:
        - name: NIFI_ZOOKEEPER_CONNECT_STRING
          value: {{ template "zookeeper.url" . }}
        - name: TRUSTSTORE_PASS
          value: {{ .Values.truststorePass }}
        - name: KEYSTORE_PASS
          value: {{ .Values.keystorePass }}
        - name: HOST
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: HEADLESS
          value: {{ template "apache-nifi.fullname" . }}-headless
        volumeMounts:
          - name: "data"
            mountPath: /opt/nifi/data
          - name: "flowfile-repository"
            mountPath: /opt/nifi/flowfile_repository
          - name: "content-repository"
            mountPath: /opt/nifi/content_repository
          - name: "provenance-repository"
            mountPath: /opt/nifi/provenance_repository
          - name: "logs"
            mountPath: /opt/nifi/logs
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-xml"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/authorizers.xml
            subPath: "authorizers.xml"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "logback-xml"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/logback.xml
            subPath: "logback.xml"
          - name: "login-identity-providers-xml"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/login-identity-providers.xml
            subPath: "login-identity-providers.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-{{ .Values.image.tag }}/conf/zookeeper.properties
            subPath: "zookeeper.properties"
      - name: nifi-app-log-sidecar
        image: {{ .Values.sidecar.image }}
        args: [/bin/sh, -c, 'tail -n+1 -F /var/log/nifi-app.log']
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: nifi-bootstrap-log-sidecar
        image: {{ .Values.sidecar.image }}
        args: [/bin/sh, -c, 'tail -n+1 -F /var/log/nifi-bootstrap.log']
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: nifi-user-log-sidecar
        image: {{ .Values.sidecar.image }}
        args: [/bin/sh, -c, 'tail -n+1 -F /var/log/nifi-user.log']
        volumeMounts:
        - name: logs
          mountPath: /var/log
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.xml"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "logback-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "logback.xml"
              path: "logback.xml"
      - name: "login-identity-providers-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "login-identity-providers.xml"
              path: "login-identity-providers.xml"
      - name: "state-management-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.dataStorage }}
    - metadata:
        name: "flowfile-repository"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.flowfileRepoStorage }}
    - metadata:
        name: "content-repository"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.contentRepoStorage }}
    - metadata:
        name: "provenance-repository"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.provenanceRepoStorage }}
    - metadata:
        name: "logs"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.logStorage }}
